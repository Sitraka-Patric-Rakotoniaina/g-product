security:
    enable_authenticator_manager: true
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    user: { password: $2y$13$UQ/esw.CkgfjfHOQC7dZQ.VO9GFDQxwYmpg7X5P7D4VGNtFtgAO5y, roles: ['ROLE_USER'] }
                    admin: { password: $2y$13$UQ/esw.CkgfjfHOQC7dZQ.VO9GFDQxwYmpg7X5P7D4VGNtFtgAO5y, roles: ['ROLE_ADMIN'] }
#                   password= "test"
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            form_login:
                login_path: app_login
                check_path: app_login
                default_target_path: app_product_index
            logout:
                path: app_logout
            json_login:
#                pattern: ^/api/login_check
#                stateless: true
#                json_login:
                    check_path: /api/login_check
                    success_handler: lexik_jwt_authentication.handler.authentication_success
                    failure_handler: lexik_jwt_authentication.handler.authentication_failure
    #        api:
#            pattern: ^/api
#            stateless: true
#            jwt: ~

    access_control:
         - { path: ^/product, roles: ROLE_USER }
         - { path: ^/category, roles: ROLE_ADMIN }
         - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
         - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
